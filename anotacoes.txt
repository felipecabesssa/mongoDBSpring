List 

list é uma interface, interface não podemos instanciar, pra instanciar temos que usar uma implementação 
da interface, no caso o ArrayList ex.:

public List<User> findAll() {
		User maria = new User(1, "Maria Brown", "maria@gmail.com");
		User alex = new User(2, "Alex Green", "alex@gmail.com");
		List<User> list = new ArrayList<>();
		list.addAll(Arrays.asList(maria, alex));
		return list;
	}
	
Invés de simplesmente retornar a lista como acima usamos um método mais sofisticado que encapsula toda uma 
estrutura necessaria para gente retornar respostas Http, ja com possiveis cabeçalhos, possiveis erros etc.

que seria o: ResponseEntity 

dai ficaria assim: public ResponseEntity<List<User>> findAll() {

para retornar temos que instanciar o ResponseEntity: return ResponseEntity.ok().body(list);

onde: ok - vai instanciar o ResponseEntity ja com o código de resposta Http informando que a resposta ocorreu com sucesso.
      body - define qual sera o corpo da resposta (no nosso caso a lista)
	
--------------------------------------------------------------------------------------------------------------

O uso do DTO no CRIA (UserService) e não no (UserDTO) é pq o userService ja tem injeção de dependencia e acesso ao banco de 
dados, não é o caso, mas caso a gente precise, não precisa injetar e fazer a configuração de acesso la na userDTO tbem.

--------------------------------------------------------------------------------------------------------------
Users

@DBRef(lazy = true)
	private List<Post> posts = new ArrayList<>();
	
2 coisas:

1 - A @DBRef indica que essa lista de posts sera referenciada no usuário (posts sera uma nova coleção) e não mais aninhados ao usuário
2 - O lazy = true faz com que só carregue os posts do usuário se a gente explicitar isso, isso evita que caso eu queira puxar um relatório 
    de usuários por exemplo o sistema não traga junto todos os posts de cada usuário, evitando assim desperdicio de recurso e carregamento.
    
---------------------------------------------------------------------------------------------------------------

encodeURIComponent("bom dia")
saida - "bom%20dia"

isso é uma função js que transforma textos alto nivel para baixo nivel, resumindo ele trata caracteres especiais, espaços etc
para uma string que o navegador e maquina compilam.

exemplo de como fazer isso no java na classe URL dentro do pacote util . função URLDecoder e Endpoint no PostResource e 
PostRepository buscando no repositório do mongo e tratando camelcase com o IgnoreCase (List<Post> findByTitleContainingIgnoreCase(String title);)

obs - método estático não precisa instanciar.

